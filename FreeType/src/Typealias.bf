namespace FreeType
{
	// config/ftconfig.h
	typealias FT_Int16 = int16;
	typealias FT_UInt16 = uint16;
	typealias FT_Int32 = int32;
	typealias FT_UInt32 = uint32;
	typealias FT_Fast = int32;
	typealias FT_UFast = uint32;
	typealias FT_Int64 = int64;
	typealias FT_Uint64 = uint64;

	// fttypes.h
	typealias FT_Bool = uint8;
	typealias FT_FWord = int16;
	typealias FT_UFWord = uint16;
	typealias FT_Char = char8;
	typealias FT_Byte = uint8;
	typealias FT_Bytes = FT_Byte*;
	typealias FT_Tag = FT_UInt32;
	typealias FT_String = char8;
	typealias FT_Short = int16;
	typealias FT_UShort = uint16;
	typealias FT_Int = int32;
	typealias FT_UInt = uint32;
	typealias FT_Long = int32;
	typealias FT_ULong = uint32;
	typealias FT_F2Dot14 = int16;
	typealias FT_F26Dot6 = int32;
	typealias FT_Fixed = int32;
	typealias FT_Error = int;
	typealias FT_Pointer = void*;
	typealias FT_Offset = uint;
	typealias FT_PtrDist = int;

	function void FT_Generic_Finalizer(void* v);
	//typealias FT_Generic_Finalizer = void function(void*);
	typealias FT_ListNode = FT_ListNodeRec*;
	typealias FT_List = FT_ListRec*;
	typealias FT_Library = FT_LibraryRec*;
	typealias FT_Module = FT_ModuleRec*;
	typealias FT_Driver = FT_DriverRec*;
	typealias FT_Renderer = FT_RendererRec*;
	typealias FT_Face = FT_FaceRec*;
	typealias FT_Size = FT_SizeRec*;
	typealias FT_GlyphSlot = FT_GlyphSlotRec*;
	typealias FT_CharMap = FT_CharMapRec*;
	typealias FT_Encoding = FT_Tag;
	typealias FT_Face_Internal = FT_Face_InternalRec*;
	typealias FT_Size_Internal = FT_Size_InternalRec*;
	typealias FT_SubGlyph = FT_SubGlyphRec*;
	typealias FT_Slot_Internal = FT_Slot_InternalRec*;
	typealias FT_Size_Request_Type = int;
	typealias FT_Size_Request = FT_Size_RequestRec*;
	typealias FT_Render_Mode = uint;
	typealias BDF_PropertyType = int;
	typealias BDF_Property = BDF_PropertyRec*;
	typealias FTC_FaceID = FT_Pointer;
	typealias FTC_Manager = FTC_ManagerRec*;
	typealias FTC_Node = FTC_NodeRec*;
	typealias FTC_Scaler = FTC_ScalerRec*;
	typealias FTC_CMapCache = FTC_CMapCacheRec*;
	typealias FTC_ImageType = FTC_ImageTypeRec*;
	typealias FTC_ImageCache = FTC_ImageCacheRec*;
	typealias FTC_SBit = FTC_SBitRec*;
	typealias FTC_SBitCache = FTC_SBitCacheRec*;
	typealias FT_Glyph = FT_GlyphRec*;
	typealias FT_BitmapGlyph = FT_BitmapGlyphRec*;
	typealias FT_OutlineGlyph = FT_OutlineGlyphRec*;
	typealias FT_Glyph_BBox_Mode = int;
	typealias FT_Pos = int32;
	typealias FT_Pixel_Mode = int;
	typealias FT_Glyph_Format = FT_Tag;
	typealias FT_Raster = FT_RasterRec*;
	typealias FT_Incremental = FT_IncrementalRec*;
	typealias FT_Incremental_Metrics = FT_Incremental_MetricsRec*;
	typealias FT_Incremental_Interface = FT_Incremental_InterfaceRec*;
	typealias FT_LcdFilter = int;
	typealias FT_Module_Interface = FT_Pointer;
	typealias FT_TrueTypeEngineType = int;
	typealias FT_Orientation = int;
	typealias FT_Stroker = FT_StrokerRec*;
	typealias FT_Stroker_LineJoin = int;
	typealias FT_Stroker_LineCap = int;
	typealias FT_StrokerBorder = int;
	typealias FT_Memory = FT_MemoryRec*;
	typealias FT_Stream = FT_StreamRec*;
	typealias FT_Angle = FT_Fixed;
	typealias FT_WinFNT_Header = FT_WinFNT_HeaderRec*;
	typealias PS_FontInfo = PS_FontInfoRec*;
	typealias PS_Private = PS_PrivateRec*;
	typealias T1_Blend_Flags = int;
	typealias PS_DesignMap = PS_DesignMapRec*;
	typealias PS_Blend = PS_BlendRec*;
	typealias CID_FaceDict = CID_FaceDictRec*;
	typealias CID_FaceInfo = CID_FaceInfoRec*;
	typealias T1_EncodingType = int;
	typealias PS_Dict_Keys = int;
	typealias FT_Sfnt_Tag = int;

	function void* FT_Alloc_Func(FT_Memory mem, int32 size);
	function void  FT_Free_Func(FT_Memory mem, void* ptr);
	function void* FT_Realloc_Func(FT_Memory mem, int32 size, int32 size2, void* ptr);

	function FT_Error FTC_Face_Requester(FTC_FaceID face, FT_Library lib, FT_Pointer point, FT_Face* face);
	function int FT_Outline_MoveToFunc(FT_Vector* vector, void* v);
	function int FT_Outline_LineToFunc(FT_Vector* vector, void* v);
	function int FT_Outline_ConicToFunc(FT_Vector* vector, FT_Vector* v2, void* v);
	function int FT_Outline_CubicToFunc(FT_Vector* vector, FT_Vector* v2, FT_Vector* v3, void* v);
	function void FT_SpanFunc(int x, int y, FT_Span* s, void* v);
	function int FT_Raster_NewFunc(void* v, FT_Raster* raster);
	function void FT_Raster_DoneFunc(FT_Raster raster);
	function void FT_Raster_ResetFunc(FT_Raster raster, uint8* ub, uint32 ui);
	function int FT_Raster_SetModeFunc(FT_Raster raster, uint32 ui, void* v);
	function int FT_Raster_RenderFunc(FT_Raster raster, FT_Raster_Params* rasterParams);
	function FT_Error FT_Incremental_GetGlyphDataFunc(FT_Incremental inc, FT_UInt ui, FT_Data* data);
	function void FT_Incremental_FreeGlyphDataFunc(FT_Incremental inc, FT_Data* data);
	function FT_Error FT_Incremental_GetGlyphMetricsFunc(FT_Incremental inc, FT_UInt ui, FT_Bool b, FT_Incremental_MetricsRec* metrics);
	function FT_Error FT_List_Iterator(FT_ListNode node, void* v);
	function void FT_List_Destructor(FT_Memory mem, void* v1, void* v2);
	function FT_Error FT_Module_Constructor(FT_Module module);
	function void FT_Module_Destructor(FT_Module module);
	function FT_Module_Interface FT_Module_Requester(FT_Module module, char8* c);
	function void FT_DebugHook_Func(void* v);
	function FT_Error FT_Glyph_InitFunc(FT_Glyph glyph, FT_GlyphSlot slot);
	function void FT_Glyph_DoneFunc(FT_Glyph glyph);
	function void FT_Glyph_TransformFunc(FT_Glyph glyph, FT_Matrix* matrix, FT_Vector* v);
	function void FT_Glyph_GetBBoxFunc(FT_Glyph glyph, FT_BBox* bbox);
	function FT_Error FT_Glyph_CopyFunc(FT_Glyph glyph, FT_Glyph glyph2);
	function FT_Error FT_Glyph_PrepareFunc(FT_Glyph glyph, FT_GlyphSlot slot);
	function FT_Error FT_Renderer_RenderFunc(FT_Renderer renderer, FT_GlyphSlot slot, FT_UInt ui, FT_Vector* vec);
	function FT_Error FT_Renderer_TransformFunc(FT_Renderer renderer, FT_GlyphSlot slot, FT_Matrix* mat, FT_Vector* vec);
	function void FT_Renderer_GetCBoxFunc(FT_Renderer renderer, FT_GlyphSlot slot, FT_BBox* bb);
	function FT_Error FT_Renderer_SetModeFunc(FT_Renderer renderer, FT_ULong ul, FT_Pointer p);
	function uint32 FT_Stream_IoFunc(FT_Stream stream, uint32 ui, uint8* ub, uint32 uiv);
	function void FT_Stream_CloseFunc(FT_Stream stream);
}
